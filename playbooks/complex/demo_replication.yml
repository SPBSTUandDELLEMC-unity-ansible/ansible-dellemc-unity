---
- hosts: localhost
  tasks:
    #pool and nasServer on 217
    #- name: get disks
    #  virtualDisk:
    #   login:
    #      unityIP: "{{ host }}"
    #      username: "{{ username }}"
    #      password: "{{ password }}"
    #   get:
    #     fields: id
    #  register: get_disks_results
    #- debug: var=get_disks_results['output']['get']

    #- name: Create pool
    #  pool:
    #    login:
    #      unityIP: "{{ host }}"
    #      username: "{{ username }}"
    #      password: "{{ password }}"
    #    createVSA:
    #      name: pool217
    #      addPoolUnitParameters: ["poolUnit": "{{ get_disks_results['output']['get'][0] }}", "poolUnit": "{{ get_disks_results['output']['get'][1] }}"]
    #  register: create_pool_results
    #- debug: var=create_pool_results['output']

    - name: get pool id 217
      commonGetPost:
        login:
          unityIP: "{{ host }}"
          username: "{{ username }}"
          password: "{{ password }}"
        get:
          resource_type: pool
          fields: id
      register: pool217
    - debug: var=pool217['output']

    - name: create Nas Server 217
      nasServer:
         login:
           unityIP: "{{ host }}"
           username: "{{ username }}"
           password: "{{ password }}"
         create:
           name: nasServer217
           homeSP: {id: 'spa'}
           pool:  {id: "{{ pool217['output']['get'][0]['id'] }}"}
           #"{{ create_pool_results['output']['createVSA']['id'] }}"}
           isMultiProtocolEnabled: false
      register: create_nas_server_results
    - debug: var=create_nas_server_results['output']

    - name: create fileInterface 217
      fileInterface:
        login:
          unityIP: "{{ host }}"
          username: "{{ username }}"
          password: "{{ password }}"
        create:
          nasServer: {id: "{{ create_nas_server_results['output']['create']['id'] }}"}
          ipPort: {id: "spa_eth0"}
          ipAddress: "{{ fileInterface_ip }}"
      register: file_interface_create_results
    - debug: var=file_interface_create_results['output']

    - name: create file system 217
      filesystem:
        login:
          unityIP: "{{ host }}"
          username: "{{ username }}"
          password: "{{ password }}"
        create:
          name: file_system217
          fsParameters:
            pool:  {id: "{{ pool217['output']['get'][0]['id'] }}"}
            #"{{ create_pool_results['output']['createVSA']['id'] }}"}
            nasServer: {id: "{{ create_nas_server_results['output']['create']['id'] }}"}
            size: 3368709120 # size 3 GB
            supportedProtocols: 0
      register: file_system_create_results217
    - debug: var=file_system_create_results217['output']

    - name: create nfsShare
      nfsShare:
        login:
          unityIP: "{{ host }}"
          username: "{{ username }}"
          password: "{{ password }}"
        create:
          storageResource: {'id': "{{ file_system_create_results217['output']['create']['storageResource']['id'] }}"}
          name: nfsShare217
          path: '/'
          defaultAccess: 2 #2 = read write 3 = root
      register: create_nfs_share_results
    - debug: var=create_nfs_share_results['output']

  #pool and nasServer on 218
    - name: get disks
      virtualDisk:
       login:
          unityIP: "{{ host2 }}"
          username: "{{ username }}"
          password: "{{ password }}"
       get:
         fields: id
      register: get_disks_results
    - debug: var=get_disks_results['output']['get']

    #- name: Create pool
    #  pool:
    #    login:
    #      unityIP: "{{ host2 }}"
    #      username: "{{ username }}"
    #      password: "{{ password }}"
    #    createVSA:
    #      name: pool218
    #      addPoolUnitParameters: ["poolUnit": "{{ get_disks_results['output']['get'][0] }}", "poolUnit": "{{ get_disks_results['output']['get'][1] }}"]
    #  register: create_pool_results
    #- debug: var=create_pool_results['output']
    

    - name: get pool id 218
      commonGetPost:
        login:
          unityIP: "{{ host2 }}"
          username: "{{ username }}"
          password: "{{ password }}"
        get:
          resource_type: pool
          fields: id
      register: pool218
    - debug: var=pool218['output']

    - name: create Nas Server
      nasServer:
         login:
           unityIP: "{{ host2 }}"
           username: "{{ username }}"
           password: "{{ password }}"
         create:
           name: nasServer218
           homeSP: {id: 'spa'}
           pool:  {id: "{{ pool218['output']['get'][0]['id'] }}"}
           #"{{ create_pool_results['output']['createVSA']['id'] }}"}
           isMultiProtocolEnabled: false
           isReplicationDestination: true
      register: create_nas_server_results
    - debug: var=create_nas_server_results['output']

    - name: create file system
      filesystem:
        login:
          unityIP: "{{ host2 }}"
          username: "{{ username }}"
          password: "{{ password }}"
        create:
          name: file_system218
          fsParameters:
            pool:  {id: "{{ pool218['output']['get'][0]['id'] }}"}
            #"{{ create_pool_results['output']['createVSA']['id'] }}"}
            nasServer: {id: "{{ create_nas_server_results['output']['create']['id'] }}"}
            size: 3368709120 # size 3 GB
            supportedProtocols: 0
          replicationParameters:
            isReplicationDestination: true
      register: file_system_create_results218
    - debug: var=file_system_create_results218['output']


    #creating replication 



    - name: create replicationInterface 217
      replicationInterface:
        login:
          unityIP: "{{ host }}"
          username: "{{ username }}"
          password: "{{ password }}"
        create:
          sp: {id: 'spa'}
          ipPort: {id: "spa_eth0"}
          ipAddress: "{{ replicationInterface_ip217 }}"
      register: replInterface
    - debug: var=replInterface['output']


    - name: create replicationInterface 218
      replicationInterface:
        login:
          unityIP: "{{ host2 }}"
          username: "{{ username }}"
          password: "{{ password }}"
        create:
          sp: {id: 'spa'}
          ipPort: {id: "spa_eth0"}
          ipAddress: "{{ replicationInterface_ip218 }}"
      register: replInterface
    - debug: var=replInterface['output']

    - name: create remoteSystem
      remoteSystem:
        login:
          unityIP: "{{ host }}"
          username: "{{ username }}"
          password: "{{ password }}"
        create:
          #all of the further parameters are required. DellEMC documentation lies:)
          managementAddress: "{{ host2 }}"
          remoteUsername: "{{ username }}"
          remotePassword: "{{ password }}"
          localUsername: "{{ username }}"
          localPassword: "{{ password }}"
      register: create_remoteSystem
    - debug: var=create_remoteSystem['output']

    - name: Get nasServer id
      commonGetPost:
        login:
          unityIP: "{{ unity_host }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        get:
          resource_type: nasServer
          fields: id
      register: nasServer_id217
    - debug: var=nasServer_id217['output']['get'][0]['id']

    - name: Get nasServer id
      commonGetPost:
        login:
          unityIP: "{{ unity_host2 }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        get:
          resource_type: nasServer
          fields: id
      register: nasServer_id218
    - debug: var=nasServer_id218['output']['get'][0]['id']

    
    - name: create replicationSession
      replicationSession:
        login:
          unityIP: "{{ host }}"
          username: "{{ username }}"
          password: "{{ password }}"
        create:
          remoteSystem: {'id': "{{ create_remoteSystem['output']['create']['id'] }}"}
          srcResourceId: "{{ nasServer_id217['output']['get'][0]['id'] }}"
          dstResourceId: "{{ nasServer_id218['output']['get'][0]['id'] }}"
          maxTimeOutOfSync: 5
          #max time to wait before sync
      register: file_system_create_results
    - debug: var=file_system_create_results['output']
