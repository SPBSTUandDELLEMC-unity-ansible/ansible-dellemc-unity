---
- hosts: localhost
  vars_files:
    - ../../group_vars/all
  tasks:
    - name: create replicationInterface source
      replicationInterface:
        login:
          unityIP: "{{ unity_ip_source }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        create:
          sp: {id: 'spa'}
          ipPort: {id: "spa_eth0"}
          ipAddress: "{{ replicationInterface_ip_source }}"
      register: replInterface_source
    - debug: var=replInterface_source['output']


    - name: create replicationInterface dest
      replicationInterface:
        login:
          unityIP: "{{ unity_ip_dest }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        create:
          sp: {id: 'spa'}
          ipPort: {id: "spa_eth0"}
          ipAddress: "{{ replicationInterface_ip_dest }}"
      register: replInterface_dest
    - debug: var=replInterface_dest['output']

    - name: create remoteSystem
      remoteSystem:
        login:
          unityIP: "{{ unity_ip_source }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        create:
          #all of the further parameters are required. DellEMC documentation lies:)
          managementAddress: "{{ unity_ip_dest }}"
          remoteUsername: "{{ unity_username }}"
          remotePassword: "{{ unity_password }}"
          localUsername: "{{ unity_username }}"
          localPassword: "{{ unity_password }}"
      register: create_remoteSystem
    - debug: var=create_remoteSystem['output']

    - name: Get nasServer id source
      commonGetPost:
        login:
          unityIP: "{{ unity_ip_source }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        get:
          resource_type: nasServer
          fields: id
      register: nasServer_id_source
    - debug: var=nasServer_id_source['output']['get'][0]['id']

    - name: Get nasServer id dest
      commonGetPost:
        login:
          unityIP: "{{ unity_ip_dest }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        get:
          resource_type: nasServer
          fields: id
      register: nasServer_id_dest
    - debug: var=nasServer_id_dest['output']['get'][0]['id']


    
    - name: create replicationSession
      replicationSession:
        login:
          unityIP: "{{ unity_ip_source }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        create:
          remoteSystem: {'id': "{{ create_remoteSystem['output']['create']['id'] }}"}
          srcResourceId: "{{ nasServer_id_source['output']['get'][0]['id'] }}"
          dstResourceId: "{{ nasServer_id_dest['output']['get'][0]['id'] }}"
          #max time to wait before sync
          maxTimeOutOfSync: 5
      register: file_system_replication
    - debug: var=file_system_replication['output']


    - name: Get filesystem's storageResource id source
      commonGetPost:
        login:
          unityIP: "{{ unity_ip_source }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        get:
          resource_type: filesystem
          fields: storageResource
      register: storageResource_id_source
    - debug: var=storageResource_id_source['output']['get'][0]['storageResource']['id']


    - name: Get filesystem's storageResource id dest
      commonGetPost:
        login:
          unityIP: "{{ unity_ip_dest }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        get:
          resource_type: filesystem
          fields: storageResource
      register: storageResource_id_dest
    - debug: var=storageResource_id_dest['output']['get'][0]['storageResource']['id']


    - name: Create replicationSession
      replicationSession:
        login:
          unityIP: "{{ unity_ip_source }}"
          username: "{{ unity_username }}"
          password: "{{ unity_password }}"
        create:
          remoteSystem: {'id': "{{ create_remoteSystem['output']['create']['id'] }}"}
          srcResourceId: "{{ storageResource_id_source['output']['get'][0]['storageResource']['id'] }}"
          dstResourceId: "{{ storageResource_id_dest['output']['get'][0]['storageResource']['id'] }}"
          #max time to wait before sync
          maxTimeOutOfSync: 5
      register: filesystem_replication
    - debug: var=filesystem_replication['output']